/-
Copyright (c) 2021 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§
-/
import tactic 
import measure_theory.measurable_space
import measure_theory.integration
import measure_theory.borel_space
import measure_theory.bochner_integration
import topology.metric_space.basic
import topology.instances.real
import topology.instances.ennreal
import order.liminf_limsup


noncomputable theory
open set 
open classical
open measure_theory
open measurable_space
open filter
open_locale topological_space



namespace portmanteau



abbreviation bdd_Rval {Œ≤ : Type*} (f : Œ≤ ‚Üí ‚Ñù) : Prop :=
  ‚àÉ (M : ‚Ñù) , ‚àÄ (b : Œ≤) , abs(f(b)) ‚â§ M

abbreviation bdd_ennval {Œ± : Type*} (f : Œ± ‚Üí ennreal) : Prop :=
  ‚àÉ (M : nnreal) , ‚àÄ (a : Œ±) , f(a) ‚â§ M



section test_functions_for_weak_convergence


/-- Continuous bounded functions on a topological space `Œ±` with values
in `ennreal` are used as "test functions" in the definition of the topology of
the weak convergence of probability measures. They are defined as a subtype
of `Œ± ‚Üí ennreal`, so that the type of (positive) functionals is just
`(cont_bdd_ennval Œ±) ‚Üí ennreal`. -/
def cont_bdd_ennval (Œ± : Type*) [topological_space Œ±] : Type*
  := { f : Œ± ‚Üí ennreal // continuous f ‚àß bdd_ennval f }


def functional_cont_bdd_ennval (Œ± : Type*) [topological_space Œ±] : Type*
  := (cont_bdd_ennval Œ±) ‚Üí ennreal


instance {Œ± : Type*} [topological_space Œ±] :
  has_coe (cont_bdd_ennval Œ±) (Œ± ‚Üí ennreal) := ‚ü®subtype.val‚ü©


@[simp] lemma val_eq_coe_testfun {Œ± : Type*} [topological_space Œ±] (f : cont_bdd_ennval Œ±) :
  f.val = f := rfl


/-- As a first step towards the definition of the topology of the weak convergence
of probability measures, the space of functionals `(cont_bdd_ennval Œ±) ‚Üí ennreal`
is equipped with the product topology (the topology of "testfunctionwise" convergence,
i.e., of pointwise convergence of the functionals defined on the space of continuous
bounded test functions). -/
instance {Œ± : Type*} [topological_space Œ±] :
  topological_space (functional_cont_bdd_ennval Œ±) := Pi.topological_space


/-- In an alternative an more familiar formulation, continuous bounded `‚Ñù`-valued
functions on a topological space `Œ±` are used as "test functions" in the definition
of the topology of the weak convergence of probability measures. They are defined as
a subtype of `Œ± ‚Üí ‚Ñù`. -/
def cont_bdd_Rval (Œ± : Type*) [topological_space Œ±] : Type*
  := { f : Œ± ‚Üí ‚Ñù // continuous f ‚àß bdd_Rval f }


def cont_bdd_Rval_mk {Œ± : Type*} [topological_space Œ±] 
  (g : Œ± ‚Üí ‚Ñù) (g_cont : continuous g) (g_bdd : bdd_Rval g) : cont_bdd_Rval Œ± :=
{ val := g ,
  property := ‚ü® g_cont , g_bdd ‚ü© , }

-- TODO: It would be good to equip `cont_bdd_Rval` with the sup-norm, show that it is
-- a Banach space, define the (continuous) dual of it, equip it with the dual norm,
-- show that each Borel probability measure defines an element of the (continuous)
-- dual, etc... At least currently the result `weak_conv_seq_iff` essentially shows
-- that the mapping the Borel probability measures into the dual will be an
-- embedding (the topologies are compatible).


--TODO: I can't use the same name for the following coercion.
--instance {Œ± : Type*} [topological_space Œ±] :
--  has_coe (cont_bdd_Rval Œ±) (Œ± ‚Üí ‚Ñù) := ‚ü®subtype.val‚ü©


end test_functions_for_weak_convergence



section topology_of_weak_convergence


/-- Borel probability measures on a topological space `Œ±` are defined as a subtype
of measures. This subtype `borel_proba Œ±` is equipped with the topology of weak
convergence. -/
def borel_proba (Œ± : Type*) [topological_space Œ±] : Type
  := { Œº : @measure_theory.measure Œ± (borel(Œ±)) // @probability_measure Œ± (borel(Œ±)) Œº }


instance (Œ± : Type*) [topological_space Œ±] :
  has_coe (borel_proba Œ±) (@measure_theory.measure Œ± (borel(Œ±))) := ‚ü®subtype.val‚ü©


@[simp] lemma val_eq_coe_borel_proba {Œ± : Type*} [topological_space Œ±] (ŒΩ : borel_proba Œ±) :
  ŒΩ.val = ŒΩ := rfl


abbreviation integrate_cont_bdd_ennval {Œ± : Type*} [topological_space Œ±]
  (Œº : borel_proba Œ±) (f : cont_bdd_ennval Œ±) : ennreal := @lintegral Œ± (borel(Œ±)) Œº f 


/-- The topology of weak convergence on `borel_proba Œ±` is defined as the induced
topology of the mapping `(borel_proba Œ±) ‚Üí ((cont_bdd_ennval Œ±) ‚Üí ennreal)` to
functionals defined by integration of a test functio against to the measure. In
other contexts this could be called the weak-* topology. -/
instance {Œ± : Type} [topological_space Œ±] : topological_space (borel_proba Œ±)
  := topological_space.induced (Œª (Œº : borel_proba Œ±) , integrate_cont_bdd_ennval Œº) infer_instance


/-- Integration of test functions against borel probability measures depends
continuously on the measure. -/
lemma integrate_cont_bdd_ennval_cont {Œ± : Type} [topological_space Œ±] :
  continuous (@integrate_cont_bdd_ennval Œ± _) := continuous_induced_dom


-- Remark: It felt convenient to isolate the following fact (does it exist already?).
lemma conv_seq_induced {Œ± Œ≥ : Type*} [top_Œ≥ : topological_space Œ≥]
  (f : Œ± ‚Üí Œ≥) (x : ‚Ñï ‚Üí Œ±) (x‚ÇÄ : Œ±) :
    tendsto (f ‚àò x) at_top (ùìù (f(x‚ÇÄ)))
      ‚Üí tendsto x at_top (@nhds Œ± (topological_space.induced f top_Œ≥) x‚ÇÄ) :=
begin
  intro h_f_lim ,
  apply tendsto_nhds.mpr ,
  intros U open_U U_ni_x‚ÇÄ ,
  rcases ((@is_open_induced_iff Œ± Œ≥ top_Œ≥ U f).mp open_U) with ‚ü® V , open_V , preim_V_eq_U ‚ü© ,
  induction preim_V_eq_U , 
  apply tendsto_nhds.mp h_f_lim V open_V U_ni_x‚ÇÄ , 
end


/-- The usual definition of weak convergence of probability measures is given in
terms of sequences of probability measures: it is the requirement that the integrals
of all continuous bounded functions against members of the sequence converge.
This characterization is shown in `weak_conv_seq_iff'` in the case when the
functions are `ennreal`-valued and the integral is `lintegral`. The most common
formulation with `‚Ñù`-valued functions and Bochner integrals is `weak_conv_seq_iff`. -/
theorem weak_conv_seq_iff' {Œ± : Type*} [topological_space Œ±]
  {Œºseq : ‚Ñï ‚Üí borel_proba Œ±} {Œº : borel_proba Œ±} :
    tendsto Œºseq at_top (ùìù Œº) 
      ‚Üî ‚àÄ (f : cont_bdd_ennval Œ±) , 
        tendsto (Œª n, integrate_cont_bdd_ennval (Œºseq(n)) f) at_top (ùìù (integrate_cont_bdd_ennval Œº f)) :=
begin
  split ,
  { intros weak_conv ,
    have key := tendsto.comp (continuous.tendsto (@integrate_cont_bdd_ennval_cont Œ± _) Œº) weak_conv ,
    exact tendsto_pi.mp key , } ,
  { intro h_lim_forall ,
    have h_lim : tendsto (Œª n, integrate_cont_bdd_ennval (Œºseq(n))) at_top (ùìù (integrate_cont_bdd_ennval Œº)) ,
    { exact tendsto_pi.mpr h_lim_forall , } ,
    exact conv_seq_induced _ Œºseq Œº h_lim , } ,
end


end topology_of_weak_convergence



section equivalent_conditions
-- See <pormanteau_conclusions.lean> for the main theorems about the equivalence.


abbreviation portmanteau_continuous_ennval {Œ± : Type} [topological_space Œ±]
  (Œºseq : ‚Ñï ‚Üí @measure_theory.measure Œ± (borel Œ±)) (Œº : @measure_theory.measure Œ± (borel Œ±)) : Prop :=
    ‚àÄ (f : Œ± ‚Üí ennreal) , (continuous f) ‚Üí (bdd_ennval f) ‚Üí
      tendsto (Œª n , (@lintegral Œ± (borel(Œ±)) (Œºseq(n)) f) ) at_top (ùìù (@lintegral Œ± (borel(Œ±)) Œº f))


abbreviation portmanteau_continuous_Rval {Œ± : Type} [topological_space Œ±]
  (Œºseq : ‚Ñï ‚Üí @measure_theory.measure Œ± (borel Œ±)) (Œº : @measure_theory.measure Œ± (borel Œ±)) : Prop :=
    ‚àÄ (f : Œ± ‚Üí ‚Ñù) , (continuous f) ‚Üí (bdd_Rval f) ‚Üí
      tendsto (Œª n , (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ (Œºseq(n)) f)) at_top (ùìù (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº f))


abbreviation portmanteau_open {Œ± : Type} [topological_space Œ±]
  (Œºseq : ‚Ñï ‚Üí @measure_theory.measure Œ± (borel Œ±)) (Œº : @measure_theory.measure Œ± (borel Œ±)) : Prop :=
    ‚àÄ (G : set Œ±) , (is_open G) ‚Üí Œº(G) ‚â§ liminf at_top (Œª n , (Œºseq(n))(G))


abbreviation portmanteau_closed {Œ± : Type} [topological_space Œ±]
  (Œºseq : ‚Ñï ‚Üí @measure_theory.measure Œ± (borel Œ±)) (Œº : @measure_theory.measure Œ± (borel Œ±)) : Prop :=
    ‚àÄ (F : set Œ±) , (is_closed F) ‚Üí limsup at_top (Œª n , (Œºseq(n))(F)) ‚â§ Œº(F)


abbreviation portmanteau_borel {Œ± : Type} [topological_space Œ±]
  (Œºseq : ‚Ñï ‚Üí @measure_theory.measure Œ± (borel Œ±)) (Œº : @measure_theory.measure Œ± (borel Œ±)) : Prop :=
    ‚àÄ (E : set Œ±) , ((borel Œ±).measurable_set' E) ‚Üí (Œº(frontier E) = 0)
      ‚Üí (tendsto (Œª n , (Œºseq(n))(E)) at_top (ùìù (Œº(E))))


end equivalent_conditions



end portmanteau


