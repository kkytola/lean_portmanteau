/-
Copyright (c) 2021 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§
-/
import tactic 
import measure_theory.measurable_space
import measure_theory.integration
import measure_theory.bochner_integration
import measure_theory.borel_space
import topology.metric_space.basic
import topology.instances.real
import topology.instances.ennreal
import order.liminf_limsup
import portmanteau_limsup_lemmas
import portmanteau_definitions
import portmanteau_proba_lemmas
import analysis.seminorm


noncomputable theory
open set 
open classical
open measure_theory
open measurable_space
open metric_space
open borel_space
open filter
open order
open_locale topological_space ennreal big_operators


namespace portmanteau

section portmanteau_integrals


variables {Œ± : Type} [topological_space Œ±]

abbreviation R_integrate (f : Œ± ‚Üí ‚Ñù) (Œº : borel_proba Œ±) := @integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº f
abbreviation R_abs_nn : ‚Ñù ‚Üí nnreal := Œª x , nnnorm x
abbreviation R_abs_enn : ‚Ñù ‚Üí ennreal := Œª x , ennreal.of_nnreal_hom (nnnorm x) --ennreal.of_real(abs(x))


lemma R_abs_enn_le_of_abs_le {x c : ‚Ñù} (h : abs(x) ‚â§ c) : R_abs_enn(x) ‚â§ ennreal.of_real(c) :=
begin
  have c_nn : 0 ‚â§ c := le_trans (abs_nonneg x) h,
  have eq := real.coe_to_nnreal c c_nn ,
  set c' := c.to_nnreal with hc' ,
  have h‚ÇÅ : R_abs_nn(x) ‚â§ c' := (real.le_to_nnreal_iff_coe_le c_nn).mpr h ,
  exact (with_top.le_coe rfl).mpr h‚ÇÅ ,
end


-- TODO: Should state for finite measures? 
lemma integrable_of_bdd_realval {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤}
  (Œº : measure Œ≤) [Œº_fin : probability_measure Œº]
  (f : Œ≤ ‚Üí ‚Ñù) (f_bdd : bdd_Rval f) (f_mble : @ae_measurable Œ≤ ‚Ñù mŒ≤ _ f Œº) :
     integrable f Œº :=
begin
  cases f_bdd with c hc ,
  set f' := R_abs_enn ‚àò f with hf' ,
  suffices : lintegral Œº f' < ‚ä§ ,
  { rw hf' at this ,
    exact ‚ü® f_mble , this ‚ü© , } ,
  have bdd' : f' ‚â§ (Œª b , ennreal.of_real(c)) ,
  { rw hf' ,
    intros b ,
    dsimp ,
    specialize hc b ,
    exact R_abs_enn_le_of_abs_le hc , } ,
  have integr_bdd := lintegral_mono bdd' ,
  set c' := ennreal.of_real(c) with hc' ,
  have const_integr : lintegral Œº (Œª b , c') = c' * (Œº(univ)) ,
  { rw ‚Üê set_lintegral_const univ c' ,
    simp , } ,
  have total : c' * (Œº(univ)) < ‚ä§ ,
  { rw (proba_muniv Œº) ,
    simp , } ,
  rw ‚Üê const_integr at total ,
  exact lt_of_le_of_lt integr_bdd total , 
end


-- TODO: Should state for finite measures? 
lemma bdd_integral_of_bdd_ennval {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤}
  (Œº : measure Œ≤) [Œº_fin : probability_measure Œº]
  (f : Œ≤ ‚Üí ennreal) (f_bdd : bdd_ennval f) :
     lintegral Œº f < ‚ä§ :=
begin
  cases f_bdd with c hc ,
  have f_le_c : f ‚â§ Œª x , c := hc ,
  have integr_f_le := @lintegral_mono Œ≤ mŒ≤ Œº _ _ f_le_c ,
  simp [proba_muniv] at integr_f_le ,
  exact lt_of_le_of_lt integr_f_le (@ennreal.coe_lt_top c) ,
end


lemma const_bdd_Rval {Œ≤ : Type*} {c : ‚Ñù} :
    bdd_Rval (Œª (x : Œ≤) , c) :=
begin
  use abs(c) ,
  intros x ,
  refl ,
end


lemma const_bdd_ennval {Œ≤ : Type*} {c : nnreal} :
    bdd_ennval (Œª (x : Œ≤) , c) :=
begin
  use c ,
  intros x ,
  simp only [ennreal.coe_le_coe] ,
end


-- TODO: Should state for finite measures?
lemma const_integrable {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤}
  (Œº : measure Œ≤) (Œº_fin : probability_measure Œº) (c : ‚Ñù) :
    integrable (Œª (x : Œ≤) , c) Œº :=
begin
  apply integrable_const_iff.mpr ,
  right ,
  exact proba_finite Œº univ ,
end


lemma integral_cst {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤}
  (Œº : measure Œ≤) (Œº_fin : probability_measure Œº) (c : ‚Ñù) :
    integral Œº (Œª (x : Œ≤) , c) = c :=
begin
  suffices : integral Œº (Œª (x : Œ≤) , c) = (Œº(univ)).to_real * c,
  { simp [proba_muniv Œº] , } ,
  apply integral_const c ,
end

lemma lintegral_cst {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤}
  (Œº : measure Œ≤) [Œº_proba : probability_measure Œº] (c : ennreal) :
    lintegral Œº (Œª (x : Œ≤) , c) = c :=
begin
  suffices : lintegral Œº (Œª (x : Œ≤) , c) = c * (Œº(univ)) ,
  { simp [proba_muniv Œº] , } ,
  apply lintegral_const c ,
end


lemma integral_add_cst {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤} {c : ‚Ñù}
  (Œº : measure Œ≤) [Œº_fin : probability_measure Œº] (f : Œ≤ ‚Üí ‚Ñù) (f_intble: integrable f Œº) :
    integral Œº ( f + (Œª (x : Œ≤) , c)) = integral Œº f + c :=
begin
  have key := @integral_add Œ≤ ‚Ñù mŒ≤ _ _ _ _ _ _ f (Œª (x : Œ≤) , c) Œº f_intble (const_integrable Œº Œº_fin c) ,
  rw integral_cst Œº Œº_fin c at key ,
  exact key ,
end


lemma lintegral_cst_sub {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤} {c : ennreal} 
  (Œº : measure Œ≤) [Œº_fin : probability_measure Œº] (c_ne_top : c ‚â† ‚ä§)
  (f : Œ≤ ‚Üí ennreal) (f_mble: measurable f) (f_le_c : f ‚â§ Œª b , c) :
    lintegral Œº ( (Œª (x : Œ≤) , c) - f) = c - lintegral Œº f :=
begin
  nth_rewrite 0 ‚Üê(lintegral_cst Œº c) ,
  have f_intble := bdd_integral_of_bdd_ennval Œº f (bdd_ennval_of_le_cst f_le_c c_ne_top) ,
  rw ‚Üê @lintegral_sub Œ≤ mŒ≤ Œº (Œª (b : Œ≤) , c) f (measurable_const) f_mble f_intble (eventually_of_forall f_le_c) ,
  refl ,
end


lemma nnreal_integral_of_integrable_nonneg {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤}
  (Œº : measure Œ≤) (f : Œ≤ ‚Üí ‚Ñù) (f_nn : 0 ‚â§ f) 
  (f_intble : integrable f Œº) :
     ennreal.of_real (integral Œº f) = lintegral Œº (ennreal.of_real ‚àò f) :=
begin
  set g := Œª (b : Œ≤) , (f(b)).to_nnreal with hg ,
  have key := @lintegral_coe_eq_integral Œ≤ mŒ≤ Œº g (integrable.max_zero f_intble) ,
  rw hg at key ,
  set œà : (Œ≤ ‚Üí nnreal) ‚Üí (Œ≤ ‚Üí ‚Ñù) := coe with hœà ,
  have eq‚ÇÄ : f = œà(g) ,
  { funext b ,
    exact left_eq_sup.mpr (f_nn b) , } , 
  have eq‚ÇÇ : ‚à´ (a : Œ≤), ‚Üë((Œª (b : Œ≤), (f b).to_nnreal) a) ‚àÇŒº = integral Œº (œà(g)) := by refl ,
  rw [eq‚ÇÇ , ‚Üêeq‚ÇÄ] at key ,
  rw ‚Üê key ,
  refl ,
end


lemma nnreal_integral_of_integrable_nonneg' {Œ≤ : Type*} {mŒ≤ : measurable_space Œ≤}
  (Œº : measure Œ≤) (f : Œ≤ ‚Üí ‚Ñù) (f_nn : 0 ‚â§ f) 
  (f_intble : integrable f Œº) :
     integral Œº f = (lintegral Œº (ennreal.of_real ‚àò f)).to_real :=
begin
  have key := nnreal_integral_of_integrable_nonneg Œº f f_nn f_intble ,
  have fin : lintegral Œº (ennreal.of_real ‚àò f) ‚â† ‚ä§ ,  
  { rw ‚Üêkey ,
    exact ennreal.of_real_ne_top , } ,
  have nn : 0 ‚â§ integral Œº f := integral_nonneg f_nn ,
  have eq := ennreal.to_real_of_real nn ,
  rw key at eq ,
  exact eq.symm ,
end


example (s : ‚Ñï ‚Üí ‚Ñù) (l : ‚Ñù) (hlim : tendsto s at_top (ùìù l)) (c : ‚Ñù) :
  tendsto (Œª (n : ‚Ñï) , s(n) + c) at_top (ùìù (l+c)) :=
begin
  exact tendsto.add_const c hlim ,
end


lemma nonneg_of_add_abs_le (a c : ‚Ñù) (h : abs(a) ‚â§ c) : 0 ‚â§ c + a :=
begin
  have key : c-abs(a) ‚â§ c+a := by linarith [neg_le.mp (neg_le_abs_self a)] ,
  exact le_trans (sub_nonneg.mpr h) key ,
end


private lemma portmanteau_continuous_equivalent_formulation'
  {Œºseq : ‚Ñï ‚Üí borel_proba Œ±} {Œº : borel_proba Œ±} :
    portmanteau_continuous_ennval (Œª n , (Œºseq(n) : @measure_theory.measure Œ± (borel(Œ±)))) Œº 
      ‚Üí portmanteau_continuous_Rval (Œª n , (Œºseq(n) : @measure_theory.measure Œ± (borel(Œ±)))) Œº :=
begin
  intros cc_ennrealval ,
  intros g g_cont g_bdd ,
  have g_bdd' := g_bdd ,
  cases g_bdd' with c hc ,
  set h := (g + (Œª x, c)) with hh ,
  set f := Œª (x : Œ±) , ennreal.of_real (h(x)) with hf ,
  have h_nn : 0 ‚â§ h ,
  { intros x ,
    rw hh ,
    have samediff := nonneg_of_add_abs_le (g(x)) c (hc x) ,
    rwa add_comm at samediff , } ,
  have f_eq_h : f = ennreal.of_real ‚àò h := by refl ,
  have h_bdd : bdd_Rval h := bdd_Rval_add g_bdd const_bdd_Rval ,
  have h_cont : continuous h := continuous.add g_cont (@continuous_const Œ± ‚Ñù _ _ c ) ,
  have f_bdd : bdd_ennval f := bdd_ennval_of_bdd_Rval h_bdd ,
  have f_cont : continuous f := cont_enn_of_cont_R h h_cont , 
  specialize cc_ennrealval f f_cont f_bdd ,
  have g_mble := continuous.borel_measurable g_cont ,
  have h_mble := continuous.borel_measurable h_cont ,
  have g_ae_mble := @measurable.ae_measurable Œ± ‚Ñù (borel(Œ±)) _ g Œº g_mble ,
  have h_ae_mble := @measurable.ae_measurable Œ± ‚Ñù (borel(Œ±)) _ h Œº h_mble ,
  have g_ae_mble_seq := Œª n , @measurable.ae_measurable Œ± ‚Ñù (borel(Œ±)) _ g (Œºseq(n)) g_mble ,
  have h_ae_mble_seq := Œª n , @measurable.ae_measurable Œ± ‚Ñù (borel(Œ±)) _ h (Œºseq(n)) h_mble ,
  have g_intble := @integrable_of_bdd_realval _ _ Œº.val Œº.prop g g_bdd g_ae_mble ,
  have h_intble := @integrable_of_bdd_realval _ _ Œº.val Œº.prop h h_bdd h_ae_mble ,
  have g_intble_seq := Œª n , @integrable_of_bdd_realval _ _ (Œºseq(n)).val (Œºseq(n)).prop g g_bdd (g_ae_mble_seq n) ,
  have h_intble_seq := Œª n , @integrable_of_bdd_realval _ _ (Œºseq(n)).val (Œºseq(n)).prop h h_bdd (h_ae_mble_seq n) ,
  suffices : lim_R (Œª n , (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ (Œºseq(n)) h)) (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº h) ,
  { have add_cst : (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº h) = (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº g) + c ,
    { rw hh ,
      apply @integral_add_cst _ _ _ Œº.val Œº.prop g g_intble , } ,
    have add_cst_seq : (Œª n , (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ (Œºseq n) h)) = (Œª n , (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ (Œºseq n) g) + c) ,
    { funext n ,
      rw hh ,
      apply @integral_add_cst _ _ _ (Œºseq(n)).val (Œºseq(n)).prop g (g_intble_seq n) , } ,
    rw [add_cst , add_cst_seq] at this ,
    have shift_lim := tendsto.add_const (-c) this ,
    simp at shift_lim ,
    exact shift_lim , } , 
  have eq := nnreal_integral_of_integrable_nonneg' Œº.val h h_nn h_intble ,
  have eq_seq := Œª n , nnreal_integral_of_integrable_nonneg' (Œºseq(n)).val h h_nn (h_intble_seq n) ,
  have eq' : @integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº h = (@lintegral Œ± (borel(Œ±)) Œº f).to_real := eq ,
  have eq_seq' : (Œª n , @integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ (Œºseq(n)).val h) = ennreal.to_real ‚àò (Œª n , (@lintegral Œ± (borel(Œ±)) (Œºseq(n)) f)) ,
  { funext n ,
    exact eq_seq n , } ,
  have fin : @lintegral Œ± (borel(Œ±)) Œº f ‚â† ‚ä§
    := ne_of_lt (@bdd_integral_of_bdd_ennval Œ± (borel(Œ±)) Œº Œº.prop f f_bdd) , 
  have key := lim_R_of_lim_enn _ _ cc_ennrealval fin ,
  rw ‚Üêeq' at key ,
  rw ‚Üêeq_seq' at key ,
  exact key , 
end


private lemma portmanteau_continuous_equivalent_formulation''
  {Œºseq : ‚Ñï ‚Üí (borel_proba Œ±)} {Œº : borel_proba Œ±} :
    portmanteau_continuous_Rval (Œª n , (Œºseq(n) : @measure_theory.measure Œ± (borel(Œ±)))) Œº
       ‚Üí portmanteau_continuous_ennval (Œª n , (Œºseq(n) : @measure_theory.measure Œ± (borel(Œ±)))) Œº :=
begin
  intros cc_Rval ,
  intros f f_cont f_bdd ,
  have f_fin_val : ‚àÄ (x : Œ±) , f(x) ‚â† ‚ä§ := finval_of_bdd_ennval f_bdd ,
  set g := Œª (x : Œ±) , ennreal.to_real (f(x)) with hg ,
  have f_eq_g : f = ennreal.of_real ‚àò g ,
  { funext x ,
    exact (ennreal.of_real_to_real (f_fin_val x)).symm , } , 
  have g_nn : 0 ‚â§ g ,
  { intros x ,
    simp only [pi.zero_apply, ennreal.to_real_nonneg] , } ,
  have g_bdd : bdd_Rval g ,
  { cases f_bdd with c hc ,
    use c ,
    intros x ,
    rw hg ,
    specialize hc x ,
    have abs_eq : (abs (f(x)).to_real) = g(x) := by simp only [ennreal.to_real_nonneg, abs_eq_self] ,
    rw hg at abs_eq ,
    dsimp at * ,
    rw abs_eq ,
    exact ennreal.to_real_le_coe_of_le_coe hc , } ,
  have g_cont : continuous g := cont_R_of_cont_bdd_enn f f_cont f_bdd , 
  have g_mble := continuous.borel_measurable g_cont ,
  have g_ae_mble := @measurable.ae_measurable Œ± ‚Ñù (borel(Œ±)) _ g Œº g_mble ,
  have g_ae_mble_seq := Œª n , @measurable.ae_measurable Œ± ‚Ñù (borel(Œ±)) _ g (Œºseq(n)) g_mble ,
  have g_intble := @integrable_of_bdd_realval _ _ Œº.val Œº.prop g g_bdd g_ae_mble ,
  have g_intble_seq := Œª n , @integrable_of_bdd_realval _ _ (Œºseq(n)).val (Œºseq(n)).prop g g_bdd (g_ae_mble_seq n) ,
  have eq := nnreal_integral_of_integrable_nonneg Œº.val g g_nn g_intble ,
  have eq_seq := Œª n , nnreal_integral_of_integrable_nonneg (Œºseq(n)).val g g_nn (g_intble_seq n) ,
  rw ‚Üê f_eq_g at * ,
  have eq' : ennreal.of_real (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº g) = @lintegral Œ± (borel(Œ±)) Œº f := eq ,
  have eq_seq' : (Œª n , ennreal.of_real (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ (Œºseq n) g)) = (Œª n , @lintegral Œ± (borel(Œ±)) (Œºseq n) f) , -- := by simp [eq_seq] ,
  { funext n ,
    exact eq_seq n , } ,
  rw ‚Üêeq' ,
  rw ‚Üêeq_seq' ,
  specialize cc_Rval g g_cont g_bdd ,
  exact lim_enn_of_lim_R cc_Rval , 
end


/-- The usual definition of weak convergence of probability measures is given in
terms of sequences of probability measures: it is the requirement that the integrals
of all continuous bounded functions against members of the sequence converge.
This characterization is shown in `weak_conv_seq_iff`. -/
theorem weak_conv_seq_iff {Œ± : Type*} [topological_space Œ±]
  {Œºseq : ‚Ñï ‚Üí borel_proba Œ±} {Œº : borel_proba Œ±} :
    tendsto Œºseq at_top (ùìù Œº) 
      ‚Üî ( ‚àÄ (f : Œ± ‚Üí ‚Ñù) , continuous f ‚Üí bdd_Rval f ‚Üí
          tendsto (Œª n, (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ (Œºseq(n)) f)) at_top (ùìù (@integral Œ± ‚Ñù (borel(Œ±)) _ _ _ _ _ _ Œº f)) ) :=
begin
  split ,
  { intros weak_conv ,
    have key := weak_conv_seq_iff'.mp weak_conv ,
    have key' : portmanteau_continuous_ennval (Œª n , (Œºseq(n) : @measure_theory.measure Œ± (borel(Œ±)))) Œº ,
    { intros f f_cont f_bdd ,
      exact key ‚ü® f , ‚ü® f_cont , f_bdd ‚ü© ‚ü© , } ,
    exact portmanteau_continuous_equivalent_formulation' key' , } , 
  { intros h ,
    have key := portmanteau_continuous_equivalent_formulation'' h ,
    apply weak_conv_seq_iff'.mpr ,
    intros f ,
    exact key f.val f.prop.1 f.prop.2 , } , 
end


theorem weak_conv_seq_iff_portmanteau_continuous_Rval {Œ± : Type*} [topological_space Œ±]
  {Œºseq : ‚Ñï ‚Üí borel_proba Œ±} {Œº : borel_proba Œ±} :
    tendsto Œºseq at_top (ùìù Œº) 
      ‚Üî portmanteau_continuous_Rval (Œª n , (Œºseq(n) : @measure_theory.measure Œ± (borel(Œ±)))) Œº 
        := weak_conv_seq_iff 


theorem weak_conv_seq_iff_portmanteau_continuous_ennval {Œ± : Type*} [topological_space Œ±]
  {Œºseq : ‚Ñï ‚Üí borel_proba Œ±} {Œº : borel_proba Œ±} :
    tendsto Œºseq at_top (ùìù Œº) 
      ‚Üî portmanteau_continuous_ennval (Œª n , (Œºseq(n) : @measure_theory.measure Œ± (borel(Œ±)))) Œº :=
begin
  split ,
  { intros h ,
    exact portmanteau_continuous_equivalent_formulation'' (weak_conv_seq_iff_portmanteau_continuous_Rval.mp h) , } ,
  { intros h ,
    exact weak_conv_seq_iff_portmanteau_continuous_Rval.mpr (portmanteau_continuous_equivalent_formulation' h) , } ,
end



end portmanteau_integrals

end portmanteau


